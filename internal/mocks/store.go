// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen --destination ../../../mocks/store.go --package=mocks --source store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	store "github.com/serverscom/serverscom-ingress-controller/internal/ingress/controller/store"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/networking/v1"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
	isgomock struct{}
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// GetIngress mocks base method.
func (m *MockStorer) GetIngress(key string) (*v10.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngress", key)
	ret0, _ := ret[0].(*v10.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngress indicates an expected call of GetIngress.
func (mr *MockStorerMockRecorder) GetIngress(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngress", reflect.TypeOf((*MockStorer)(nil).GetIngress), key)
}

// GetIngressServiceInfo mocks base method.
func (m *MockStorer) GetIngressServiceInfo(ingress *v10.Ingress) (map[string]store.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngressServiceInfo", ingress)
	ret0, _ := ret[0].(map[string]store.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngressServiceInfo indicates an expected call of GetIngressServiceInfo.
func (mr *MockStorerMockRecorder) GetIngressServiceInfo(ingress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressServiceInfo", reflect.TypeOf((*MockStorer)(nil).GetIngressServiceInfo), ingress)
}

// GetNodesIpList mocks base method.
func (m *MockStorer) GetNodesIpList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesIpList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNodesIpList indicates an expected call of GetNodesIpList.
func (mr *MockStorerMockRecorder) GetNodesIpList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesIpList", reflect.TypeOf((*MockStorer)(nil).GetNodesIpList))
}

// GetSecret mocks base method.
func (m *MockStorer) GetSecret(key string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", key)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStorerMockRecorder) GetSecret(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStorer)(nil).GetSecret), key)
}

// GetService mocks base method.
func (m *MockStorer) GetService(key string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", key)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockStorerMockRecorder) GetService(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockStorer)(nil).GetService), key)
}

// ListIngress mocks base method.
func (m *MockStorer) ListIngress() []*v10.Ingress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngress")
	ret0, _ := ret[0].([]*v10.Ingress)
	return ret0
}

// ListIngress indicates an expected call of ListIngress.
func (mr *MockStorerMockRecorder) ListIngress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngress", reflect.TypeOf((*MockStorer)(nil).ListIngress))
}

// Run mocks base method.
func (m *MockStorer) Run(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockStorerMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStorer)(nil).Run), arg0)
}
