// Code generated by MockGen. DO NOT EDIT.
// Source: sync.go
//
// Generated by this command:
//
//	mockgen --destination ../../mocks/sync_manager.go --package=mocks --source sync.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
)

// MockSyncer is a mock of Syncer interface.
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
	isgomock struct{}
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer.
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance.
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// CleanupLBs mocks base method.
func (m *MockSyncer) CleanupLBs(ingressClass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupLBs", ingressClass)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupLBs indicates an expected call of CleanupLBs.
func (mr *MockSyncerMockRecorder) CleanupLBs(ingressClass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupLBs", reflect.TypeOf((*MockSyncer)(nil).CleanupLBs), ingressClass)
}

// SyncL7LB mocks base method.
func (m *MockSyncer) SyncL7LB(lb *serverscom.L7LoadBalancerCreateInput) (*serverscom.L7LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncL7LB", lb)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncL7LB indicates an expected call of SyncL7LB.
func (mr *MockSyncerMockRecorder) SyncL7LB(lb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncL7LB", reflect.TypeOf((*MockSyncer)(nil).SyncL7LB), lb)
}

// SyncStatus mocks base method.
func (m *MockSyncer) SyncStatus(ctx context.Context, lb *serverscom.L7LoadBalancer) (*serverscom.L7LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx, lb)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockSyncerMockRecorder) SyncStatus(ctx, lb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockSyncer)(nil).SyncStatus), ctx, lb)
}

// SyncTLS mocks base method.
func (m *MockSyncer) SyncTLS(ingress *v1.Ingress, certManagerPrefix string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTLS", ingress, certManagerPrefix)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncTLS indicates an expected call of SyncTLS.
func (mr *MockSyncerMockRecorder) SyncTLS(ingress, certManagerPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTLS", reflect.TypeOf((*MockSyncer)(nil).SyncTLS), ingress, certManagerPrefix)
}
