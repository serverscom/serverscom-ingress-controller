// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen --destination ../../mocks/tls_manager.go --package=mocks --source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockTLSManagerInterface is a mock of TLSManagerInterface interface.
type MockTLSManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTLSManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockTLSManagerInterfaceMockRecorder is the mock recorder for MockTLSManagerInterface.
type MockTLSManagerInterfaceMockRecorder struct {
	mock *MockTLSManagerInterface
}

// NewMockTLSManagerInterface creates a new mock instance.
func NewMockTLSManagerInterface(ctrl *gomock.Controller) *MockTLSManagerInterface {
	mock := &MockTLSManagerInterface{ctrl: ctrl}
	mock.recorder = &MockTLSManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSManagerInterface) EXPECT() *MockTLSManagerInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTLSManagerInterface) Get(fingerprint string) (*serverscom.SSLCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", fingerprint)
	ret0, _ := ret[0].(*serverscom.SSLCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTLSManagerInterfaceMockRecorder) Get(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTLSManagerInterface)(nil).Get), fingerprint)
}

// GetByID mocks base method.
func (m *MockTLSManagerInterface) GetByID(id string) (*serverscom.SSLCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*serverscom.SSLCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTLSManagerInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTLSManagerInterface)(nil).GetByID), id)
}

// HasRegistration mocks base method.
func (m *MockTLSManagerInterface) HasRegistration(fingerprint string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegistration", fingerprint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRegistration indicates an expected call of HasRegistration.
func (mr *MockTLSManagerInterfaceMockRecorder) HasRegistration(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegistration", reflect.TypeOf((*MockTLSManagerInterface)(nil).HasRegistration), fingerprint)
}

// SyncCertificate mocks base method.
func (m *MockTLSManagerInterface) SyncCertificate(fingerprint, name string, cert, key, chain []byte) (*serverscom.SSLCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCertificate", fingerprint, name, cert, key, chain)
	ret0, _ := ret[0].(*serverscom.SSLCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCertificate indicates an expected call of SyncCertificate.
func (mr *MockTLSManagerInterfaceMockRecorder) SyncCertificate(fingerprint, name, cert, key, chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCertificate", reflect.TypeOf((*MockTLSManagerInterface)(nil).SyncCertificate), fingerprint, name, cert, key, chain)
}
