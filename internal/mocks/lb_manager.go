// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen --destination ../../mocks/lb_manager.go --package=mocks --source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
)

// MockLBManagerInterface is a mock of LBManagerInterface interface.
type MockLBManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLBManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockLBManagerInterfaceMockRecorder is the mock recorder for MockLBManagerInterface.
type MockLBManagerInterfaceMockRecorder struct {
	mock *MockLBManagerInterface
}

// NewMockLBManagerInterface creates a new mock instance.
func NewMockLBManagerInterface(ctrl *gomock.Controller) *MockLBManagerInterface {
	mock := &MockLBManagerInterface{ctrl: ctrl}
	mock.recorder = &MockLBManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLBManagerInterface) EXPECT() *MockLBManagerInterfaceMockRecorder {
	return m.recorder
}

// DeleteLoadBalancer mocks base method.
func (m *MockLBManagerInterface) DeleteLoadBalancer(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockLBManagerInterfaceMockRecorder) DeleteLoadBalancer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockLBManagerInterface)(nil).DeleteLoadBalancer), name)
}

// GetIds mocks base method.
func (m *MockLBManagerInterface) GetIds() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIds")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIds indicates an expected call of GetIds.
func (mr *MockLBManagerInterfaceMockRecorder) GetIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIds", reflect.TypeOf((*MockLBManagerInterface)(nil).GetIds))
}

// GetLoadBalancer mocks base method.
func (m *MockLBManagerInterface) GetLoadBalancer(name string) (*serverscom.L7LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", name)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLBManagerInterfaceMockRecorder) GetLoadBalancer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLBManagerInterface)(nil).GetLoadBalancer), name)
}

// HasRegistration mocks base method.
func (m *MockLBManagerInterface) HasRegistration(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegistration", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRegistration indicates an expected call of HasRegistration.
func (mr *MockLBManagerInterfaceMockRecorder) HasRegistration(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegistration", reflect.TypeOf((*MockLBManagerInterface)(nil).HasRegistration), name)
}

// NewLoadBalancer mocks base method.
func (m *MockLBManagerInterface) NewLoadBalancer(input *serverscom.L7LoadBalancerCreateInput) (*serverscom.L7LoadBalancer, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLoadBalancer", input)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// NewLoadBalancer indicates an expected call of NewLoadBalancer.
func (mr *MockLBManagerInterfaceMockRecorder) NewLoadBalancer(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLoadBalancer", reflect.TypeOf((*MockLBManagerInterface)(nil).NewLoadBalancer), input)
}

// TranslateIngressToLB mocks base method.
func (m *MockLBManagerInterface) TranslateIngressToLB(ingress *v1.Ingress, sslCerts map[string]string) (*serverscom.L7LoadBalancerCreateInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateIngressToLB", ingress, sslCerts)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancerCreateInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateIngressToLB indicates an expected call of TranslateIngressToLB.
func (mr *MockLBManagerInterfaceMockRecorder) TranslateIngressToLB(ingress, sslCerts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateIngressToLB", reflect.TypeOf((*MockLBManagerInterface)(nil).TranslateIngressToLB), ingress, sslCerts)
}

// UpdateLoadBalancer mocks base method.
func (m *MockLBManagerInterface) UpdateLoadBalancer(input *serverscom.L7LoadBalancerUpdateInput) (*serverscom.L7LoadBalancer, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", input)
	ret0, _ := ret[0].(*serverscom.L7LoadBalancer)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockLBManagerInterfaceMockRecorder) UpdateLoadBalancer(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockLBManagerInterface)(nil).UpdateLoadBalancer), input)
}
